;; Auto-generated. Do not edit!


(when (boundp 'softarq_msgs::SequenceResult)
  (if (not (find-package "SOFTARQ_MSGS"))
    (make-package "SOFTARQ_MSGS"))
  (shadow 'SequenceResult (find-package "SOFTARQ_MSGS")))
(unless (find-package "SOFTARQ_MSGS::SEQUENCERESULT")
  (make-package "SOFTARQ_MSGS::SEQUENCERESULT"))

(in-package "ROS")
;;//! \htmlinclude SequenceResult.msg.html


(defclass softarq_msgs::SequenceResult
  :super ros::object
  :slots (_last ))

(defmethod softarq_msgs::SequenceResult
  (:init
   (&key
    ((:last __last) 0)
    )
   (send-super :init)
   (setq _last (round __last))
   self)
  (:last
   (&optional __last)
   (if __last (setq _last __last)) _last)
  (:serialization-length
   ()
   (+
    ;; int64 _last
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int64 _last
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _last (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _last) (= (length (_last . bv)) 2)) ;; bignum
              (write-long (ash (elt (_last . bv) 0) 0) s)
              (write-long (ash (elt (_last . bv) 1) -1) s))
             ((and (class _last) (= (length (_last . bv)) 1)) ;; big1
              (write-long (elt (_last . bv) 0) s)
              (write-long (if (>= _last 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _last s)(write-long (if (>= _last 0) 0 #xffffffff) s)))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int64 _last
#+(or :alpha :irix6 :x86_64)
      (setf _last (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _last (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;;
   self)
  )

(setf (get softarq_msgs::SequenceResult :md5sum-) "5c5e0984025368e59f177a5859d58685")
(setf (get softarq_msgs::SequenceResult :datatype-) "softarq_msgs/SequenceResult")
(setf (get softarq_msgs::SequenceResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
int64 last

")



(provide :softarq_msgs/SequenceResult "5c5e0984025368e59f177a5859d58685")


